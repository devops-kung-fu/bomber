package osv

import (
	"encoding/json"
	"log"
	"strings"

	"github.com/kirinlabs/HttpRequest"
	"github.com/package-url/packageurl-go"

	"github.com/devops-kung-fu/bomber/models"
)

const OSV_URL = "https://api.osv.dev/v1/query"

type OSVQuery struct {
	Version string     `json:"version"`
	Package OSVPackage `json:"package"`
}

type OSVPackage struct {
	Name string `json:"name"`
}

// Generated by https://quicktype.io

type Response struct {
	Vulns []Vuln `json:"vulns"`
}

type Vuln struct {
	ID               string               `json:"id"`
	Summary          string               `json:"summary"`
	Details          string               `json:"details"`
	Modified         string               `json:"modified"`
	Published        string               `json:"published"`
	DatabaseSpecific VulnDatabaseSpecific `json:"database_specific"`
	References       []Reference          `json:"references"`
	Affected         []Affected           `json:"affected"`
	SchemaVersion    string               `json:"schema_version"`
	Aliases          []string             `json:"aliases"`
	Severity         []Severity           `json:"severity"`
}

type Affected struct {
	Package          PackageClass             `json:"package"`
	Ranges           []Range                  `json:"ranges"`
	DatabaseSpecific AffectedDatabaseSpecific `json:"database_specific"`
	Versions         []string                 `json:"versions"`
}

type AffectedDatabaseSpecific struct {
	LastKnownAffectedVersionRange *string `json:"last_known_affected_version_range,omitempty"`
	Source                        string  `json:"source"`
}

type PackageClass struct {
	Name      string `json:"name"`
	Ecosystem string `json:"ecosystem"`
	Purl      string `json:"purl"`
}

type Range struct {
	Type   string  `json:"type"`
	Events []Event `json:"events"`
}

type Event struct {
	Introduced string `json:"introduced"`
}

type VulnDatabaseSpecific struct {
	Severity       string   `json:"severity"`
	CweIDS         []string `json:"cwe_ids"`
	GithubReviewed bool     `json:"github_reviewed"`
}

type Reference struct {
	Type Type   `json:"type"`
	URL  string `json:"url"`
}

type Severity struct {
	Type  string `json:"type"`
	Score string `json:"score"`
}

type Type string

const (
	Advisory Type = "ADVISORY"
	Package  Type = "PACKAGE"
	Web      Type = "WEB"
)

func Info() string {
	return "OSV Vulnerability Database (https://osv.dev) - EXPERIMENTAL"
}

func Scan(purls []string, username, token string) (packages []models.Package, err error) {

	for _, pp := range purls {
		purl, err := packageurl.FromString(pp)
		if err != nil {
			log.Println(err)
		}
		p := OSVPackage{
			Name: purl.Name,
		}
		q := OSVQuery{
			Package: p,
			Version: purl.Version,
		}
		req := HttpRequest.NewRequest()
		log.Println(q)
		resp, err := req.JSON().Post(OSV_URL, q)

		defer func() {
			err = resp.Close()
		}()

		log.Printf("OSV Response Status: %v", resp.StatusCode())

		body, err := resp.Body()
		if err != nil {
			return nil, err
		}
		if resp.StatusCode() == 200 {
			log.Println("Body:", string(body))
			var response Response
			err = json.Unmarshal(body, &response)
			if len(response.Vulns) > 0 {
				pkg := models.Package{
					Purl: pp,
				}
				for _, v := range response.Vulns {
					vuln := models.Vulnerability{
						Cwe:      strings.Join(append(v.Aliases, v.DatabaseSpecific.CweIDS...), ","),
						Severity: v.DatabaseSpecific.Severity,
					}
					pkg.Vulnerabilities = append(pkg.Vulnerabilities, vuln)
				}
				packages = append(packages, pkg)
			}
		}
	}
	return
}
