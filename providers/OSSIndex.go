package providers

import (
	"encoding/json"
	"log"

	"github.com/kirinlabs/HttpRequest"
)

// Generated by https://quicktype.io

const OSSINDEX_URL = "https://ossindex.sonatype.org/api/v3/authorized/component-report"

type CoordinateRequest struct {
	Coordinates []string `json:"coordinates"`
}

type CoordinateResponses []CoordinateResponse

type CoordinateResponse struct {
	Coordinates     string          `json:"coordinates"`
	Reference       string          `json:"reference"`
	Description     string          `json:"description"`
	Vulnerabilities []Vulnerability `json:"vulnerabilities"`
}

type Vulnerability struct {
	ID                 string        `json:"id"`
	DisplayName        string        `json:"displayName"`
	Title              string        `json:"title"`
	Description        string        `json:"description"`
	CvssScore          float64       `json:"cvssScore"`
	CvssVector         string        `json:"cvssVector"`
	Cwe                string        `json:"cwe"`
	Reference          string        `json:"reference"`
	ExternalReferences []interface{} `json:"externalReferences"`
}

func OutputCredits() string {
	return "Sonatype OSS Index (https://ossindex.sonatype.org)"
}

func OSSIndex(purls []string, username, token string) (coordinateResponses CoordinateResponses, err error) {
	j := len(purls)
	for i := 0; i < j; i += 128 {
		z := i + 128
		if z > j {
			z = j
		}
		p := purls[i:z]
		var coordinates CoordinateRequest
		coordinates.Coordinates = append(coordinates.Coordinates, p...)
		req := HttpRequest.NewRequest()
		req.SetBasicAuth(username, token)

		resp, err := req.JSON().Post(OSSINDEX_URL, coordinates)

		defer func() {
			err = resp.Close()
		}()

		log.Printf("OSSIndex Response Status: %v", resp.StatusCode())

		body, err := resp.Body()
		if err != nil {
			return nil, err
		}
		var responses CoordinateResponses
		err = json.Unmarshal(body, &responses)

		coordinateResponses = append(coordinateResponses, responses...)
	}
	return
}
